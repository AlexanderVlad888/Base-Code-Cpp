Задача 2.1. Месяцы
Описание

Напишите программу, которая спрашивает у пользователя номер месяца и выводит на экран название месяца, введённого пользователем.

Если пользователь ввёл некорректный номер месяца, сообщите ему об этом.

Спрашивайте пользователя до тех пор, пока он не введёт 0.

Для решения задачи воспользуйтесь перечислением.
Пример работы программы

Введите номер месяца: 1
Январь
Введите номер месяца: 7
Июль
Введите номер месяца: 13
Неправильный номер!
Введите номер месяца: 0
До свидания

Подсказки

    Не читайте этот раздел сразу. Попытайтесь сначала решить задачу самостоятельно :)

Что использовать для решения.

Используйте перечисление для обработки пользовательского ввода. Не забудьте привести пользовательский ввод к типу перечисления с помощью static_cast.

Обрабатывайте пользовательский ввод с помощью switch case.

Для ввода значений с консоли используйте std::cin.

Для вывода на консоль используйте std::cout.


* * *


Задача 2.2. Счета
Описание

Создайте структуру для хранения информации о банковском счёте. Она должна хранить номер счёта (целое число), имя владельца (строка) и количество денег на счету (дробное число).

Создайте функцию для изменения баланса счёта. Функция должна принимать экземпляр структуры банковского счёта и новую сумму.

Попросите пользователя заполнить поля экземпляра структуры, сообщить новый баланс счёта и выведите обновлённый экземпляр структуры на консоль.
Пример работы программы

Введите номер счёта: 123456789
Введите имя владельца: Андрей
Введите баланс: 5000
Введите новый баланс: 6000
Ваш счёт: Андрей, 123456789, 6000

Подсказки

    Не читайте этот раздел сразу. Попытайтесь сначала решить задачу самостоятельно :)

Что использовать для решения.

Не забудьте, что для изменения экземпляра структуры внутри функции нужно передавать его по ссылке или через указатель.

Для объявления структуры используйте ключевое слово struct.

Для ввода значений с консоли используйте std::cin.

Для вывода на консоль используйте std::cout.


* * *


Задача 2.3. Вывод структуры
Описание

Создайте структуру для хранения адреса. Структура должна содержать название города, улицы, номер дома, номер квартиры и индекс.

Создайте функцию для вывода структуры на консоль.

Протестируйте созданную функцию. Создайте в коде экземпляры структуры, передайте их в функцию и выведите на консоль получившиеся экземпляры структуры.
Пример работы программы

Город: Москва
Улица: Арбат
Номер дома: 12
Номер квартиры: 8
Индекс: 123456

Город: Ижевск
Улица: Пушкина
Номер дома: 59
Номер квартиры: 143
Индекс: 953769

Подсказки

    Не читайте этот раздел сразу. Попытайтесь сначала решить задачу самостоятельно :)

Что использовать для решения.

Структура объявляется вне функций.

Чтобы создать экземпляр структуры, нужно указать её тип.

Для доступа к полям структуры используйте оператор ..

Для ввода значений с консоли используйте std::cin.

Для вывода на консоль используйте std::cout.


* * *

Задача 3.1. Калькулятор двух чисел

В этом задании вам нужно будет создать класс, выполняющий простые арифметические операции для двух чисел, и продемонстрировать его работу

Создайте класс Calculator. Класс должен содержать два поля num1 и num2 для хранения дробных чисел. Также класс должен содержать следующие методы:

    double add() - метод должен возвращать результат сложения num1 и num2
    double multiply() - метод должен возвращать результат перемножения num1 и num2
    double subtract_1_2() - метод должен возвращать результат вычитания num2 из num1
    double subtract_2_1() - метод должен возвращать результат вычитания num1 из num2
    double divide_1_2() - метод должен возвращать результат деления num1 на num2
    double divide_2_1() - метод должен возвращать результат деления num2 на num1
    bool set_num1(double num1) - метод должен установить значение поля num1 равное значению аргумента num1 в случае, если значение аргумента не равно 0. Возвращает true, если установка произошла успешно, в обратном случае false
    bool set_num2(double num2) - метод должен установить значение поля num2 равное значению аргумента num2 в случае, если значение аргумента не равно 0. Возвращает true, если установка произошла успешно, в обратном случае false

Напишите код, демонстрирующий работу класса Calculator. Попросите пользователя ввести два числа. После этого выведите пользователю результаты всех операций или попросите его ввести значение ещё раз, если предыдущий ввод был некорректен

Программа спрашивает пользователя бесконечно, пока он сам не закроет консоль
Пример работы программы
Консоль

Введите num1: 3
Введите num2: 6
num1 + num2 = 9
num1 - num2 = -3
num2 - num1 = 3
num1 * num2 = 18
num1 / num2 = 0.5
num2 / num1 = 2
Введите num1: 5
Введите num2: 0
Неверный ввод!
Введите num2: 5
num1 + num2 = 10
num1 - num2 = 0
num2 - num1 = 0
num1 * num2 = 25
num1 / num2 = 1
num2 / num1 = 1

Подсказки

    Не читайте этот раздел сразу, попытайтесь сначала решить задачу самостоятельно :)

Подсказка. Что использовать для решения?

Подумайте, какой должен быть тип у полей num1 и num2

Чтобы создать экземпляр класса Calculator, напишите Calculator <имя переменной>;

В методах set_num1 и set_num2 потребуется условный оператор и ключевое слово this

Для вывода на консоль используйте std::cout

Для ввода с консоли используйте std::cin




* * *


Задача 3.2. Счётчик

В этом задании вам нужно будет создать класс-счётчик

Создайте класс Counter. Класс должен выполнять функцию счётчика, для этого он должен предоставлять:

    возможность увеличить своё значение на 1
    возможность уменьшить своё значение на 1
    возможность посмотреть своё текущее значение
    возможность создания экземпляра класса с начальным значением по умолчанию (1)
    возможность создания экземпляра класса с инициализирующим начальным значением

Обратите внимание на то, что у внешнего кода не должно быть возможности изменить внутреннее значение счётчика напрямую

Напишите код, демонстрирующий работу класса Counter. Спросите у пользователя, хочет ли он указать начальное значение для счётчика. Если хочет, дайте ему возможность это сделать. Затем предоставьте пользователю возможность вводить команды:

    +: увеличьте счётчик на 1
    -: уменьшите счётчик на 1
    =: выведите текущее значение счётчика
    x: завершите работу программы

Пример работы программы
Консоль

Вы хотите указать начальное значение счётчика? Введите да или нет: да
Введите начальное значение счётчика: 6
Введите команду ('+', '-', '=' или 'x'): +
Введите команду ('+', '-', '=' или 'x'): +
Введите команду ('+', '-', '=' или 'x'): =
8
Введите команду ('+', '-', '=' или 'x'): -
Введите команду ('+', '-', '=' или 'x'): =
7
Введите команду ('+', '-', '=' или 'x'): x
До свидания!

Подсказки

    Не читайте этот раздел сразу, попытайтесь сначала решить задачу самостоятельно :)

Подсказка. Что использовать для решения?

Для хранения внутреннего значения счётчика вам понадобится поле

Для того, чтобы нельзя было изменить значение счётчика напрямую, ваше поле должно быть приватным

Для уменьшения, увеличения и получения значения счётчика вам нужно создать соответствующие публичные методы

Для инициализации счётчика создайте конструкторы - без параметров и с параметром

Для вывода на консоль используйте std::cout

Для ввода с консоли используйте std::cin



* * *


Задача 4.1. Адреса

В этом задании вы будете читать адреса из файла и выводить их в другой файл в другом формате.

Вам дан файл in.txt, в котором находится N адресов. Число N идёт первым в файле. После числа N располагаются N блоков по 4 строки в каждом. Каждый блок состоит из следующих строк: название города, название улицы, номер дома, номер квартиры.

Задача программы заключается в том, чтобы считать адреса из файла in.txt и вывести их в файл out.txt в другом формате и в обратном порядке. Не забудьте вывести количество адресов в начале.

Формат вывода адреса: <название города>, <название улицы>, <номер дома>, <номер квартиры>.
Пример работы программы
in.txt

3
Москва
Строителей
34
12
Омск
Пушкина
2
13
Новосибирск
Мира
85
64

out.txt

3
Новосибирск, Мира, 85, 64
Омск, Пушкина, 2, 13
Москва, Строителей, 34, 12

Подсказки

    Не читайте этот раздел сразу. Попытайтесь сначала решить задачу самостоятельно :)

Что использовать для решения.

Для хранения адреса создайте класс, например address. В нём будут поля для хранения названий города и улицы (std::string), а также номеров дома и квартиры (int).

Создайте в вашем классе конструктор с параметрами, чтобы нельзя было создать пустой адрес.

Создайте в вашем классе метод, который собирает строку для вывода в файл. Можно назвать его, например get_output_address. Метод будет возвращать значение типа std::string.

Не забудьте сделать ваши поля приватными. Так инкапсуляция вашего класса станет лучше, потому что будет меньше потенциальных связей с внешним кодом.

Для хранения всех адресов, экземпляров вашего класса, заведите динамический массив типа address*.

Для считывания адресов используйте цикл for.

Для работы с файлом в режиме чтения используйте класс std::ifstream.

Для работы с файлом в режиме записи используйте класс std::ofstream.



* * *



Задача 4.2. Сортируем адреса

В этом задании вы будете читать из файла адреса и выводить их в другой файл в другом формате, отсортированными по названию города.

Вам дан файл in.txt, в котором находится N адресов. Число N идёт первым в файле. После числа N располагаются N блоков по 4 строки в каждом. Каждый блок состоит из следующих строк: название города, название улицы, номер дома, номер квартиры.

Задача программы заключается в том, чтобы считать адреса из файла in.txt, отсортировать их по названию города и вывести отсортированный список адресов в файл out.txt в другом формате. Не забудьте вывести количество адресов в начале.

Города должны быть отсортированы в алфавитном порядке.

Формат вывода адреса: <название города>, <название улицы>, <номер дома>, <номер квартиры>.
Пример работы программы
in.txt

5
Москва
Строителей
34
12
Новокузнецк
Науки
5
16
Омск
Пушкина
2
13
Москва
Арбат
4
1
Новосибирск
Мира
85
64

out.txt

5
Москва, Строителей, 34, 12
Москва, Арбат, 4, 1
Новокузнецк, Науки, 5, 16
Новосибирск, Мира, 85, 64
Омск, Пушкина, 2, 13

Подсказки

    Не читайте этот раздел сразу. Попытайтесь сначала решить задачу самостоятельно :)

Что использовать для решения.

Для хранения адреса создайте класс, например address. В нём будут поля для хранения названий города и улицы (std::string), а также номеров дома и квартиры (int).

Создайте в вашем классе конструктор с параметрами, чтобы нельзя было создать пустой адрес.

Создайте в вашем классе метод, который собирает строку для вывода в файл. Можно назвать его, например get_output_address. Метод будет возвращать значение типа std::string.

Не забудьте сделать ваши поля приватными. Так инкапсуляция вашего класса станет лучше, потому что будет меньше потенциальных связей с внешним кодом.

Для хранения всех адресов, экземпляров вашего класса, заведите динамический массив типа address*.

Для считывания адресов используйте цикл for.

Для сортировки создайте функцию void sort(address* addresses, int size), в которой примените один из известных вам алгоритмов сортировки.

Для работы с файлом в режиме чтения используйте класс std::ifstream.

Для работы с файлом в режиме записи используйте класс std::ofstream.



